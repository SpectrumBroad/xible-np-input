<script type="module">
  if (!window.customElements.get('input-filter-type')) {
    class InputFilterType extends HTMLInputElement {
      connectedCallback() {
        const xibleNode = this.getRootNode().xibleNode;

        const anyIn = xibleNode.getInputByName('any');
        const filteredOut = xibleNode.getOutputByName('filtered');

        this.oninput = () => {
          anyIn.setType(this.value);
          filteredOut.setType(this.value);
        };
      }
    }

    window.customElements.define('input-filter-type', InputFilterType, {extends: 'input'});

    class InputFilterDatalist extends HTMLDataListElement {
      async connectedCallback() {
        const typeDefs = await xibleWrapper.TypeDef.getAll();
        for (const typeDefName in typeDefs) {
          this.appendChild(document.createElement('option')).appendChild(document.createTextNode(typeDefName));
        }
      }
    }
    window.customElements.define('input-filter-datalist', InputFilterDatalist, {extends: 'datalist'});
  }
</script>
<input
  is="input-filter-type"
  type="text"
  placeholder="type"
  data-output-value="filterType"
  data-description="The type to use as a filter."
  required="required"
  list="types"
  value="object"
/>
<datalist
  is="input-filter-datalist"
  id="types"
>
</datalist>
